/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package transcriber;

import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.media.MediaPlayer;
import javafx.util.Duration;

/**
 * Modulo onde o player de video e integrado a um painel de controles de video,
 * ferramenta visual que integra o player de video feito em JavaFX com o painel
 * de controles feito em Swing, que permite visualizar um video, pausar,
 * avançar, retroceder, controlar o volume e a velocidade.
 *
 * @author Yan Kaic
 * @author Carlos Hatus
 */
public class VideoPanel extends javax.swing.JPanel {

    private VideoPlayer video;
    private TimeSliderUpdater sliderUpdater;

    /**
     * Construtom sem parametros que inicia a parte grafica do painel de video.
     */
    public VideoPanel() {
        initComponents();
        sliderUpdater = new TimeSliderUpdater();
    }

    /**
     * Carrega na tela o video passado por parametro.
     *
     * @param url String contendo o endereco url do video.
     */
    public void load(String url) {
        video = new VideoPlayer(url);
        video.init();
        videoScreen.removeAll();
        videoScreen.add(video);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    buttonPanel = new javax.swing.JPanel();
    backButton = new javax.swing.JButton();
    rewingButton = new javax.swing.JButton();
    stopButton = new javax.swing.JButton();
    playButton = new javax.swing.JButton();
    pauseButton = new javax.swing.JButton();
    fowardButton = new javax.swing.JButton();
    nextButton = new javax.swing.JButton();
    videoScreen = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    timeSlider = new javax.swing.JSlider();
    controlPanel = new javax.swing.JPanel();
    volumePanel = new javax.swing.JPanel();
    volumeLabel = new javax.swing.JLabel();
    volumeSlider = new javax.swing.JSlider();
    speedPanel = new javax.swing.JPanel();
    speedIconLabel = new javax.swing.JLabel();
    speedSlider = new javax.swing.JSlider();
    speedLabel = new javax.swing.JLabel();

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );

    setBackground(new java.awt.Color(224, 224, 224));
    setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

    buttonPanel.setBackground(new java.awt.Color(224, 224, 224));
    buttonPanel.setMinimumSize(new java.awt.Dimension(240, 19));
    buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 3, 0));

    backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/backicon.png"))); // NOI18N
    backButton.setEnabled(false);
    buttonPanel.add(backButton);

    rewingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rewardicon.png"))); // NOI18N
    rewingButton.setToolTipText("Retroceder 5 segundos");
    rewingButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rewingButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(rewingButton);

    stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stopicon.png"))); // NOI18N
    stopButton.setToolTipText("Parar");
    stopButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stopButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(stopButton);

    playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/playicon.png"))); // NOI18N
    playButton.setToolTipText("Reproduzir");
    playButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        playButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(playButton);

    pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pauseicon.png"))); // NOI18N
    pauseButton.setToolTipText("Pausar");
    pauseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        pauseButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(pauseButton);

    fowardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fowardicon.png"))); // NOI18N
    fowardButton.setToolTipText("Avançar 5 segundos");
    fowardButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fowardButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(fowardButton);

    nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/nexticon.png"))); // NOI18N
    nextButton.setEnabled(false);
    nextButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(nextButton);

    videoScreen.setBackground(new java.awt.Color(102, 102, 102));
    videoScreen.setLayout(new java.awt.GridLayout(1, 0));

    jLabel1.setBackground(new java.awt.Color(102, 102, 102));
    jLabel1.setForeground(new java.awt.Color(102, 102, 102));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/videoicon.png"))); // NOI18N
    jLabel1.setToolTipText("");
    videoScreen.add(jLabel1);

    timeSlider.setForeground(new java.awt.Color(102, 102, 102));
    timeSlider.setMajorTickSpacing(100);
    timeSlider.setMinorTickSpacing(2);
    timeSlider.setPaintTicks(true);
    timeSlider.setToolTipText("tempo");
    timeSlider.setValue(0);
    timeSlider.setValueIsAdjusting(true);
    timeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        timeSliderStateChanged(evt);
      }
    });
    timeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseReleased(java.awt.event.MouseEvent evt) {
        timeSliderMouseReleased(evt);
      }
    });

    controlPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 2));

    volumeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/volumeicon.png"))); // NOI18N

    volumeSlider.setMajorTickSpacing(100);
    volumeSlider.setMinorTickSpacing(100);
    volumeSlider.setToolTipText("volume");
    volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        volumeSliderStateChanged(evt);
      }
    });

    javax.swing.GroupLayout volumePanelLayout = new javax.swing.GroupLayout(volumePanel);
    volumePanel.setLayout(volumePanelLayout);
    volumePanelLayout.setHorizontalGroup(
      volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(volumePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(volumeLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(volumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
    );
    volumePanelLayout.setVerticalGroup(
      volumePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(volumeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    controlPanel.add(volumePanel);

    speedIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/speedicon.png"))); // NOI18N

    speedSlider.setMajorTickSpacing(20);
    speedSlider.setMaximum(5);
    speedSlider.setMinimum(-7);
    speedSlider.setToolTipText("");
    speedSlider.setValue(1);
    speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        speedSliderStateChanged(evt);
      }
    });

    speedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    speedLabel.setText("1x");

    javax.swing.GroupLayout speedPanelLayout = new javax.swing.GroupLayout(speedPanel);
    speedPanel.setLayout(speedPanelLayout);
    speedPanelLayout.setHorizontalGroup(
      speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(speedPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(speedIconLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(speedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(speedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    speedPanelLayout.setVerticalGroup(
      speedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(speedIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
      .addGroup(speedPanelLayout.createSequentialGroup()
        .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, Short.MAX_VALUE))
      .addComponent(speedLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    controlPanel.add(speedPanel);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(timeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(videoScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(videoScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(timeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
      try {
          video.getPlayer().play();

          if (!sliderUpdater.isAlive()) {
              sliderUpdater = new TimeSliderUpdater();
              sliderUpdater.start();
              sliderUpdater.checkSleepTime();
          }
      } catch (NullPointerException e) {
      }
  }//GEN-LAST:event_playButtonActionPerformed

  private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
      try {
          video.getPlayer().pause();
          sliderUpdater.stopUpdate();
      } catch (NullPointerException e) {
      }
  }//GEN-LAST:event_pauseButtonActionPerformed

  private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
      try {
          video.getPlayer().stop();
          sliderUpdater.stopUpdate();
          sliderUpdater.update();
      } catch (NullPointerException e) {
      }
  }//GEN-LAST:event_stopButtonActionPerformed

  private void fowardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fowardButtonActionPerformed
      try {
          Duration time = video.getPlayer().getCurrentTime();
          video.getPlayer().seek(new Duration(time.toMillis() + 5000));
          sliderUpdater.update();
      } catch (NullPointerException e) {
      }
  }//GEN-LAST:event_fowardButtonActionPerformed

  private void rewingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rewingButtonActionPerformed
      try {
          Duration time;
          time = getCurrentTime();
          double miliseconds = time.toMillis() - 5000; //adicionando 5 segundos
          video.getPlayer().seek(new Duration(miliseconds));
          sliderUpdater.update();
      } catch (NullPointerException e) {
      }
  }//GEN-LAST:event_rewingButtonActionPerformed

    private Duration getCurrentTime() {
        return video.getPlayer().getCurrentTime();
    }

  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
      // TODO add your handling code here:
  }//GEN-LAST:event_nextButtonActionPerformed

  private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
      double volume = volumeSlider.getValue();
      volume /= 100;
      video.getPlayer().setVolume(volume);
  }//GEN-LAST:event_volumeSliderStateChanged

  private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
      double speed = speedSlider.getValue();
      if (speed <= 0) {
          speed--;
          speed /= 10;
          speed += 1;
      }
      video.getPlayer().setRate(speed);
      DecimalFormat formater = new DecimalFormat("0.0");
      String speedText = formater.format(speed);
      speedText = speedText.replace(',', '.');
      speedLabel.setText(speedText + "x");
      sliderUpdater.multiplySpeed(speed);

  }//GEN-LAST:event_speedSliderStateChanged

  private void timeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSliderStateChanged

  }//GEN-LAST:event_timeSliderStateChanged

  private void timeSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeSliderMouseReleased
      double porcent = timeSlider.getValue();
      porcent /= 100;
      System.out.println(porcent);
      double miliseconds;
      miliseconds = getTotalDuration().toMillis();
      Duration time = new Duration(miliseconds * porcent);
      video.getPlayer().seek(time);
  }//GEN-LAST:event_timeSliderMouseReleased

    private Duration getTotalDuration() {
        return video.getPlayer().getMedia().getDuration();
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton backButton;
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JPanel controlPanel;
  private javax.swing.JButton fowardButton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JButton nextButton;
  private javax.swing.JButton pauseButton;
  private javax.swing.JButton playButton;
  private javax.swing.JButton rewingButton;
  private javax.swing.JLabel speedIconLabel;
  private javax.swing.JLabel speedLabel;
  private javax.swing.JPanel speedPanel;
  private javax.swing.JSlider speedSlider;
  private javax.swing.JButton stopButton;
  private javax.swing.JSlider timeSlider;
  private javax.swing.JPanel videoScreen;
  private javax.swing.JLabel volumeLabel;
  private javax.swing.JPanel volumePanel;
  private javax.swing.JSlider volumeSlider;
  // End of variables declaration//GEN-END:variables

  public MediaPlayer getVideoPlayer() {
    return video.getPlayer();
  }

    /**
     * Responsavel por atualizar a barra de progresso de tempo do video.
     */
    public class TimeSliderUpdater extends Thread {

        private boolean valid;
        private int sleepTime;

        /**
         * Reescreve o metodo run da classe Thread.
         */
        @Override
        public void run() {
            while (valid) {
                update();
                try {
                    sleep(sleepTime);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }

        /**
         * Atualiza o valor da barra de progrsso do video.
         */
        private void update() {
            double currentTime = getCurrentTime().toMillis();
            double totalTime = getTotalDuration().toMillis();
            int porcent = (int) (currentTime / totalTime * 100);

            timeSlider.setValue(porcent);
            System.out.println(porcent);

        }

        /**
         * Verifica o tempo de reproducao
         */
        public void checkSleepTime() {
            sleepTime = (int) (getTotalDuration().toMillis() / 100);
        }

        /**
         * atualia a barra de progresso do video??
         */
        public TimeSliderUpdater() {
            this.valid = true;
            this.sleepTime = 500;
        }

        /**
         * Para a atualiacao da barra de progresso do video
         */
        public void stopUpdate() {
            this.valid = false;
        }

        /**
         * Muda a velocidade de reproducao do video
         *
         * @param value valor para multiplicar a velocidade do video
         */
        public void multiplySpeed(double value) {
            this.sleepTime /= value;
        }

    }

}
